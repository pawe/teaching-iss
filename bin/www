#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('iis:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
var boot = function () {
  server.listen({
    host: process.env.HOST || 'localhost',
    port: port
  })
  server.on('error', onError)
  server.on('listening', onListening)
}

var shutdown = function () {
  server.close()
}

// if this is not the main entrypoint, the server needs to be explicitly started
if (require.main === module) {
  boot()
  console.log('Server listening on \x1b[4mhttp://localhost:' + port + '\x1b[0m')

  if (process.argv.indexOf('--init-db') >= 0) {
    require('./init-db')
    console.log('Database initialized and seeded.')
  }
} else {
  module.exports.boot = boot
  module.exports.shutdown = shutdown
  module.exports.port = port
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)

    // eslint-disable-next-line no-fallthrough
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)

    // eslint-disable-next-line no-fallthrough
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
